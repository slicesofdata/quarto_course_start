---
title: "**Data frame manipulation and wrangling**"
author: "Gabriel I. Cook"
#date: "`r Sys.Date()`"
date: "`r format(Sys.time(), '%d %B, %Y')`"

execute:
  #enabled: false
  freeze: auto
  
# this is a test to figure out why there is the following error when rendering many quarto files:
# ERROR: The filename, directory name, or volume label syntax is incorrect. (os error 123)
---

::: callout-important
## Under construction. 

This page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you.

:::

```{r}
#| label: load-packages
#| include: false

#library()
#library()
```

# **Overview**

This module demonstrates how to use **{dplyr}** to wrangle data frames. There is much that you can do with the library and this module focuses on selecting, filtering, and arranging data frames or tibbles. Helper functions from libraries like **{magrittr}**, **{stringr}**, and **{tidyselect}** are also used in conjunction with **{dplyr}**.

## **Libraries** 


- **{here}**: `r packageVersion("here")`: for path management
- **{dplyr}** `r packageVersion("dplyr")`: for selecting, filtering, and mutating
- **{magrittr}** `r packageVersion("magrittr")`: for code clarity and piping data frame objects
- **{stringr}**: `r packageVersion("stringr")`: for working with strings
- **{tidyselect}**: `r packageVersion("tidyselect")`: for selecting sets from strings

## **External Functions**

Provided in class:

`view_html()`: for viewing data frames in html format, from `/r/my_functions.R`

```{r}
source(here::here("r", "my_functions.R"))
```

## **Libraries**

We will work with a few different libraries for data manipulation. Let's load them into our work space using `library()`.

```{r}
library(magrittr)
library(dplyr)
library(stringr)
```

Make note of any warnings that appear when loading libraries. There are some libraries that contain functions with the same names. Be aware that the most recently loaded library function will take precedence. You can avoid confusion using `::` to call a function from a particular library (e.g., `libraryname::functionname()`).


# **A Grammar for Data Wrangling** 

The [**{dplyr}**](https://dplyr.tidyverse.org/) package presents a type of grammar for wrangling data ([Wickham *and* Francois 2014](https://www.researchgate.net/publication/275646200_dplyr_A_Grammar_of_Data_Manipulation)). **{dplyr}** is part of the [**{tidyverse}**](https://www.tidyverse.org/) ecosystem which loads using `library(tidyverse)`, or specifically using `library(dplyr)`. **{dplyr}** also imports functions from **{tidyselect}**, which is also part of the **{tidyverse}** ecosystem.

The functions from any `R` package can be called after loading the package library. One does not need to reference the package explicitly when calling a function but to avoid confusion, we will often reference the package/library and the function together (e.g., `package::function()`).

Working with data involves creating new column variables, removing or renaming column variables, removing or deleting row observations, sorting, and summarizing data (often by groups/factors). etc. Consequently, there are five main function verbs for working with data in a data frame: `select`, `filter`, `mutate`, `arange`, and `summarize`. Their corresponding functions are:

- `select(dataframe, variables_to_select)`: subset by columns 
- `mutate(dataframe, variables_to_create)` and `dplyr::rename()`: add or modify existing columns
- `filter(dataframe, rows_to_select)`: subset by rows
- `arrange(dataframe, variable_to_sort_by)`: sort rows
- `summarize(dataframe, procedures_for_summarizing)` in conjunction with `dplyr::group_by()`: aggregate the data in some way


# **Some Common Ways for Selecting Variables Using `{dplyr}`**

You can reference variables by their names or by their column position in a data frame (e.g., 1, 25, etc.). 

Using `select()`, you can select columns/variables from a data frame. The variables you select are retained and variables omitted that you don't select are omitted in the returned data frame. 

If you are not piping a data frame from a previous object using either `|>` (now in base `R`) or  `%>%` (from **{magrittr}**), the first argument passed into `select()` will be the data frame. The second and subsequent arguments can be column variables you wish to select from the data frame. 

```
select(mydataframe, myvars)
```

If piping a data frame with **{magrittr}**, `.` or `.data` will serve to reference the inherited data frame. This detail is not needed but adding it serves as a reminder that the data frame is the first argument of the function. 

```
dataframe %>%
   select(., myvars)
```

Variables can be passed by their column position.

*Passing variables separately by name:*

```{r}
USArrests %>% 
  select(., 1, 3) %>% head()
```

Variables can be passed separately without quotes or collectively as a character vector.

*Passing variables separately by name:*

```{r}
USArrests %>% 
  select(., Murder, Assault) %>% head()
```
*Note:* passing variables by name does not work with `base R` manipulation, you need to pass the name as a string.


*Passing variables separately as characters:*

```{r}
USArrests %>% 
  select(., "Murder", "Assault") %>% head()
```


*Passing a character vector (more like you would do in `base R`):*

```{r}
USArrests %>% 
  select(., c("Murder", "Assault")) %>% head()
```

*Passing a numeric vector of column positions:*

```{r}
USArrests %>% 
  select(., c(1, 3)) %>% head()
```

*Passing an object holding a character vector containing two elements:*

First, creat the vector object:

```{r}
keep_vars <- c("Murder", "Assault")
```

Then pass the vector into the function:

```{r}
USArrests %>% 
  select(., keep_vars) %>% head()
```


## *Select Variables Starting with or Ending with Certain Characters*

One thing about **{dplyr}**, when you load the library, there are functions from other libraries that are imported along with **{dplyr}**'s own functions. These important functions are designed to work with each other, so the people who maintain the libraries have packaged them up nicely so you don't have to load separate libraries. 

Many of the functions are imported from the **{tidyselect}** library and these functions are what give you additional manipulation ability. Some imported functions are: `all_of()`, `any_of()`, `contains()`, `ends_with()`, `everything()`, `last_col()`, `matches()`, and `starts_with()`.

With functions like `starts_with()`, `contains()`, and `ends_with()`, you can select variables with character patterns in their names.

Rather that passing the names of the variables as the second argument (e.g., `c("Murder", "Assault")`), you would pass the helper function, say `starts_with()`. Whatever `starts_with()` returns is what gets passed to `select()` as the variables. This is what is referred to as functional programming. Rather than coding specifically what to do, you with utilize the task of another function to passed its returned object as an argument to another function.  

But first, we need to see what these functions, like `starts_with()`, are doing. For more information, use `?starts_with`.

`starts_with(match, ignore.case = TRUE, vars = NULL)`

Notice the arguments we need to pass: 

- `match`: A character vector
- `ignore.case`: If `TRUE`, the default, ignores case when matching names. This is most flexible.
- `vars`: A character vector of variable names. If not supplied, the variables are taken from the current selection context (as established by functions like `select()` or `pivot_longer()`).

Let's just try out `starts_with()` on its own. Let's set a required pattern `match = some character` and because `vars = NULL` by default, let's just set `vars = some character vector`. Note that `vars` is not the second argument, so you will want to name it in the function call. 

```{r}
starts_with(match = "a", vars = c("Hello", "Hi", "Bye"))
```

Returns `integer(0)` which is speak for "there is no match". Hmm, OK. Let's try another character.

```{r}
starts_with(match = "b", vars = c("Hello", "Hi", "Bye"))
```

OK, so now an integer is returned (yes, try `is.integer()` if you don't believe me). 

```{r}
is.integer(starts_with("b", vars = c("Hello", "Hi", "Bye")))
```

Importantly, the value refers to the element index/position in the `vars` vector. Because the third string `"Bye"` starts with `"b"`, that's what is returned. 

Try something else:

```{r}
starts_with("h", vars = c("Hello", "Hi", "Bye"))
```

Now a vector with length = 2 is returned, representing both the first and the second elements start with "h". 

```{r}
length(starts_with("h", vars = c("Hello", "Hi", "Bye")))
```

See, it's really a vector containing the element(s) of the `vars` vector matching the pattern. 

And yes, this the letter casing is ignored because the default `ignore.case = TRUE`. Set to `FALSE` if you want your match to be case sensitive.

```{r}
starts_with("h", 
            vars = c("Hello", "Hi", "Bye"), 
            ignore.case = F
            )
```

OK, no matches.

You will typically use `starts_with()` along with other functions. When using `starts_with()` in the context of `select()`, the `vars` argument is essentially passing `vars = the names of the columns of the data frame passed to select()`.

Example:

```
select(mydataframe,
    starts_with(match = "my pattern",
                vars = "var names of mydataframe")
                )
```

Passing the `data frame` into `select()` without piping it using `%>%`:

```{r}
select(USArrests, starts_with("m")) %>% head()
```

Piping the `data frame` into `select()`:

```{r}
USArrests %>%
  select(., starts_with("m")) %>% head()
```

Another example:

```{r}
USArrests %>%
  select(., ends_with("t")) %>% head()
```


## *Selecting and Selecting Out Variables By/Between Index*

There are many approaches for *selecting* or *selecting out* column variables. You can pass multiple arguments for each specification or you can pass a single vector that contains all specifications.  

- `select(., 1,2)`: select first and second columns
- `select(., c(1,2))`: select first and second columns
- `select(., -c(1,2))`: select out first and second columns

- `select(., 1:2)`: select first through second columns
- `select(., c(1:2))`: select first through second columns
- `select(., -c(1:2))`: select out first through second columns

*Potential Recommendation*: use options utilizing `c()` to pass a vector because this habit will be more versatile with `base R` functionality. However, online solutions will likely not take this approach.


Let's make a data frame to work with first.

```{r}
DAT <- data.frame(
  Id  = c(100, 101, 102, 103, 104, 100, 105),
  Sex = c('male', 'female', 'Male', NA, 'man', "male", "neither"),
  Age = c(25, 33, 27, 40, 44, 25, 40),
  Renting = c("yes", NA, "yes", NA, "no", "yes", "yes")
)
```

Select columns 1 and 2: 

```{r}
DAT %>%
  select(., 1,2) 
```

Select columns 1 and 2 as a vector containing values 1 and 2:

```{r}
DAT %>%
  select(., c(1,2)) 
```

Select out columns 1 and 2 as a vector containing values 1 and 2:

```{r}
DAT %>%
  select(., -c(1,2)) 
```

Select from columns 1 to 2 using the `:` operator:

```{r}
DAT %>%
  select(., 1:2) 
```

Select from columns 1 through 3 using a vector containing the `:` operator:

```{r}
DAT %>%
  select(., c(1:3)) 
```

Select out columns 1 through 3 using a vector containing the `:` operator:

```{r}
DAT %>%
  select(., -c(1:3))   # select out from here to there
```


## *Selecting and Selecting Out Variables By or Between Character Name*

These approaches are similar to those offered earlier except that some involve passing variables by their name (e.g., character names). Whereas the order of the variables in a data frame may move around, the names may be more stable or permanent, at least after you have cleaned up the names. Consequently, passing variables by name may be more foolproof. 

You don't have to be familiar with all approaches and you may settle on using one that makes the most sense to you.

- `select(., "var1", "var2")`
- `select(., c("var1", "var2"))`
- `select(., -c("var1", "var2"))`

- `select(., var1:var2))`
- `select(., c("var1":"var2))`
- `select(., -c("var1":"var2))`

*Recommendation*: use options utilizing `c()` as this will be more versatile with `base R` functionality.

These approaches also work but they may lead to some confusion regarding usage of quotes:

- `select(., var1, var2)`
- `select(., c(var1, var2))`
- `select(., -c(var1, var2))` 


Select variables `Id` though `Age` using the `:` operator:

```{r}
DAT %>%
  select(., Id:Age) # select from here to there
```

Select variables `Id` though `Age` passed as strings using the `:` operator:

```{r}
DAT %>%
  select(., "Id":"Age") # select from here to there
```

Select variables `Id` though `Age` as a vector containing the variable names passed as strings and using the `:` operator:

```{r}
DAT %>%
  select(., c("Id":"Age")) # select from here to there
```

Select out variables `Id` though `Age` as a vector containing the variable names passed as strings and using the `:` operator:

```{r}
DAT %>%
  select(., -c("Id":"Age"))   # select out from here to there
```

You can also use the `!` operator to select *NOT* these variables (therefore, all others)

```{r}
DAT %>%
  select(., !c("Id":"Age"))   # select out from here to there
```


## *Selecting and Selecting Out Variables Characters in Their Names*

- `select(., starts_with("characters"))`
- `select(., ends_with("characters"))`
- `select(., contains('e'))`

Select variables which start with character "i":

```{r}
DAT %>% select(., starts_with('i'))
```

Select variables which DO NOT start with character "s":

```{r}
DAT %>% select(., -starts_with('s'))
```

Select variables which end with character "e":

```{r}
DAT %>% select(., ends_with('e'))
```

Select variables which end with character "e":

```{r}
DAT %>% select(., -ends_with('e'))
```

Select variables which contain character "g":

```{r}
DAT %>% select(., contains('g'))
```

Select variables which DO NOT contain character "g":

```{r}
DAT %>% select(., -contains('g'))
```


Select variables containing a regular expression, use `matches()`:

`.*` will grab all names because it means any character and any number of times

```{r}
DAT %>% select(., matches(".*"))
```

`\\d` will grab all variables containing a digit:

```{r}
DAT %>% 
  mutate(., 
         var_1    = 1,
         var_11   = 1,
         var_3    = 1,
         var1_var = 1
         ) %>%
  select(., matches("\\d"))
```

`v.*\\d` will grab all variables that start with v and then contain any characters which are followed by a digit:

```{r}
DAT %>% 
    mutate(., 
         var_1    = 1,
         var_11   = 1,
         var_3    = 1,
         var1_var = 1
         ) %>%
  select(., matches("v.*\\d"))
```

`\\d$` will grab all variables ending in a digit (`$` means end):

```{r}
DAT %>% 
    mutate(., 
         var_1    = 1,
         var_11   = 1,
         var_3    = 1,
         var1_var = 1
         ) %>%
  select(., matches("\\d$"))

```

You can also negate all regular expression matches if you want to exclude:

```{r}
DAT %>%
      mutate(., 
         var_1    = 1,
         var_11   = 1,
         var_3    = 1,
         var1_var = 1
         ) %>%
  select(., -matches("\\d$"))
```


Note: The functions will return lowercase and uppercase variable name matches because the default behavior is `ignore.case = TRUE`. Set to `FALSE` if you want to perform precise surgery on the variables.  


## *Selecting and Selecting Out Variables by Type*

Select variables that are numeric:

```{r}
DAT %>% select(., where(is.numeric))
```

Select variables that are NOT numeric:

```{r}
DAT %>% select(., -where(is.numeric))
```

Select variables that are character:

```{r}
DAT %>% select(., where(is.character))
```

Select variables that are NOT character:

```{r}
DAT %>% select(., -where(is.character))
```

Select variables that are logical (`TRUE` to `FALSE`):

```{r}
DAT %>% select(., where(is.logical))
```

Select variables that are NOT logical (`TRUE` to `FALSE`):

```{r}
DAT %>% select(., -where(is.logical))
```


# **Cleaning Data**

Data files are messy and as a result require cleaning. You will have missing rows, incorrect variable names, files with columns named the same, `NA`s, strings for numbers, duplicate rows of data, people who completed a survey twice, and all sorts of unimaginable and unbelievable data problems. So cleaning is important. 

Whereas `select()` is used for columns, `filter()` operates on rows. Data frame manipulation may involve keeping only certain rows for data, for example, male or female respondents, male respondents, those who do not contain missing values (e.g., `NA`s) for a specific column variable, who are of a certain age (or born in in certain year), who are above (or below) some acceptable criterion, etc. 

When a column variable has more than one value (e.g., check using `unique()` to determine the unique elements contained), you may wish to filter on some but not others. 

You may even need to filter rows in a data frame that are distinct (e.g., not duplicate responses). This is often a good first step in order to determine the size of the usable data set. `dplyr::distinct()` makes de-duplicating easy as this function will return only distinct rows.


## *Removing duplicate rows using `distinct()`*

- `dplyr::distinct()`: remove duplicate rows
- `dplyr::distinct(., column)`: remove duplicate rows by column
- `na.omit()`: remove any row with NA’s (missing values)

Let's use the simple `DAT` data frame.

```{r}
DAT # or with %>% print() 
```

Notice that rows 1 and 6 are the same person (e.g., Id) and have exactly the same data for all variables. 

```{r}
DAT[1,] == DAT[6,]
```

Great that the rows are consistent but you don't want their data twice. So let's just remove any rows that are identical.

```{r}
DAT %>%
  distinct(.) #%>%    # Remove exact duplicates

```

If you know each row is unique based on a variable in the data frame, you can also use `distinct()` to remove duplicates for a specific variable. Make sure that this variable specification is actually one that you would not want duplicates of.

```{r}
DAT %>%             
  distinct(., Id) # %>% view_html(.) # Remove duplicates by variable; passes unique values for data frame
```

But this function simply returns the unique values in `Id`. To retain the variables, set `.keep_all = T`. If you want to remove duplicates and assign the cleaned data frame to an object, you would likely want to keep all of your variables.

```{r}
DAT %>%             
  distinct(., Id, .keep_all = T) #%>% view_html(.)
```

Notice, however, this only removed the last instance or `Id == 100`. Which row to include is a judgment call. The first, the last, neither, the average? Is there a correct answer? 


# **Filtering using {dplyr} and Understanding Filtering Operators**

Filtering cases using the `dplyr::filter()` verbs works by removing rows that do not match a specific criterion and then by returning the data frame that omits the mismatched condition. 

Some useful filtering operators and functions include: `==`, `>`, `>=`, `&`, `|`, `!`, `xor()`, `c()`, `is.na()`, `between()`, `near()`. 

Row/Observations/Cases can be filtered to "include" only certain matched conditions or can be filtered to "exclude" by negating those matched conditions. If the column variable `Sex` is in the data frame and cases are `'male'`, `'men'`, `'female'`, `'women'`, `'neither'`, `NA`, etc., you can specify the column `Sex` variable and then the row matching condition(s). 

The first argument in `dplyr::filter()` is a data frame, and the function all `dplyr::filter(DAT, Sex == 'female')` will filter the data frame named `DAT` to include rows for which the `sex` column equals `'female'`. In other words, `TRUE` rows.

```{r}
dplyr::filter(DAT, Sex == 'female')
```

Similarly, the function call `dplyr::filter(., Sex == 'male')` can be read "filter the data frame to include rows for which the value of `Sex == 'male'` is `TRUE`". 

More flexibly, however, you could specify a vector containing acceptable strings using `c()`. `dplyr::filter(., Sex %in% c('male'))` filters the rows to include only those for which the value for `sex` is in the string vector which includes a single string,`'male'` whereas `dplyr::filter(., Sex %in% c('male', 'Man'))` filters the rows to include only those for which the value for `Sex` is in the string vector which includes `'male'` and `'Man'`. Cases containing `'Male'`, `'Men'` (R is a case-sensitive language), or `'female'`, for example, will not be included in the returned data frame because they do not match values in the string vector. 


# **Piping Multiple Filter Function Calls**

In many cases, data filtering will involve different conditions for different column variables, so specifying them separately as separate lines of code is most appropriate. 

When passing a data frame using `%>%` from **{magrittr}**, the first argument for the data frame can be specified using a `.` because the function inherits the data frame manipulated. However, **{dplyr}** also understand this so the `.` can also be omitted for convenience; this is the general practice you will see in forums like [stackoverflow.com](stackoverflow.com). Example to follow.


# **Filtering Cases by Character Names/String Values **

## *Filter Cases using `==`*

Filter rows for which the `Sex` variable is equal to the string `'female'`:

```{r}
DAT %>%
  dplyr::filter(., Sex == 'female')
```

Filter rows for which the `Sex` variable is not equal to the string `'female'`:

```{r}
DAT %>%
  dplyr::filter(., Sex != 'female')
```


Filter rows for which the `Sex` variable is equal to the string `'female'` **AND** `Age` is greater than the numeric 27:

```{r}
DAT %>%
  dplyr::filter(., Sex == 'female' & Age > 27) # this "AND" that
```

Filter rows for which the `Sex` variable is equal to the string `'female'` **OR** `Age` is greater than the numeric 27:

```{r}
DAT %>%
  dplyr::filter(., Sex == 'female' | Age > 27) # this "OR" that
```

A cleaner method involves separate lines of code. Although cleaner, this will not allow the "OR" option because the data frame that is returned from the first `filter()` is passed to the second `filter()` and all cases other than `"female"` have already been removed from the data frame.

```{r}
DAT %>%
  dplyr::filter(., Sex == 'female') %>%   # keep female (and add another pipe)
  dplyr::filter(., Age >= 27)             # keep only those equal to or older than 27
```


# **Filtering Cases by Value**

## *Filter by `<` and `>` or `<=` or `>=`...*

```{r}
DAT %>% dplyr::filter(., Age < 40)  # keep those less than 


DAT %>% dplyr::filter(., Age > 40)  # keep older than


DAT %>% dplyr::filter(., Age >= 40)  # keep equal to or older than
```


## **Filter Cases by Conditional X *or* Y Using `|` Operator...**

Using the "OR" operator, `|`, cases can be included if "this" OR "that" condition.

Filter numbers:

```{r}
DAT %>%
  dplyr::filter(., Age == 25 | Age == 40)    # filter out numeric values IN a range
```


Filter characters:

```{r}
DAT %>%
  dplyr::filter(., Sex == 'male' | Sex == 'female')
```

Although `dplyr::filter(sex %in% c('male', 'female'))` would be easier.


Filter rows of variables of both types:

```{r}
DAT %>%
  dplyr::filter(., Sex == 'male' | Age == 27)  
```


## **Filter Cases Between Values with `between()`**

Between ages 25 and 33:

```{r}
DAT %>%
  dplyr::filter(., between(Age, 27, 33))
```


## *Filter by range using the `%in%` operator (this is IN meaning in)*

Though less flexible than using `between()`, `%in%` may be easier to remember:

```{r}
DAT %>%
  dplyr::filter(., Age %in% 20:43)    # filter out numeric values IN a range
```

One's age is in the range from 20 through 43.


If a vector object is already defined (e.g., `my_levels = c('male', 'female')`), you can use that for filtering also. Such approaches are useful when data manipulation involves reusing a reference as it simplifies coding and reduces errors because the specification is defined only once.

```{r}
my_levels = c('male', 'female')

DAT %>%
  dplyr::filter(., Sex %in% my_levels)
```

## *Filter by exclusion*

When inclusion of variables is inappropriate, exclusion of them may be useful. The `!` operator means "NOT" in `R` so you can use that to accomplish the opposite of the statement. For example, `dplyr::filter(., !sex %in% c('male', NA))` will "filter the data frame to include rows in the `sex` column for which the value is NOT in the vector".

Exclude rows in the `Sex` variable that are `NA` or `'male'`:

```{r}
DAT %>%
  dplyr::filter(., !Sex %in% c('male', NA))  # keep only if NOT in vector
```

Exclude rows in the `Sex` variable that are `Men` or `'male'`:

```{r}
DAT %>%
  dplyr::filter(., !Sex %in% c('male', 'Men'))  # keep only if NOT in vector
```


## *Filter by conditional X and Y using `&` operator...*

By range:

```{r}
DAT %>%
  dplyr::filter(., Id >= 102 & Age <= 43)    
```

```{r}
DAT %>%
  dplyr::filter(., Age >= 20 & Age <= 43)    
```

Note: Age 20:43 won't work. Can you figure out why?



# **Filter Cases Containing Characters Using `stringr::str_detect()` and `%in%`:**

If you want to filter cases that contain certain characters, unfortunately, you cannot use `contains()` as you would for variable names. For matching characters in levels of variables, you'll need something like `stringr::str_detect()` or `grepl()`. 

- `stringr::str_detect()`: returns matching conditions

The example below uses `str_detect()` to detect the presence of a character match and returns a logic vector with `TRUE`s for matching cases. When paired with `filter()`, the data frame is filtered by to contains cases that match the pattern for the variable.

Example: `stringr::str_detect(my_variable, "pattern")`: 

Let's look for levels of `Sex` for which `"ma"` is detected.

```{r}
DAT %>% dplyr::filter(., stringr::str_detect(Sex, "ma")) 
```

But the case for which `Sex = Male` is now missing. This is because `stringr::str_detect()` is a case-sensitive pattern match. 

You can fix this is a couple ways:

1) make the cases in `Sex` all lower case to `mutate()` the fix or
2) to wrap `Sex` in `tolower()` to make cases lowercase. 

The first option might be better if you want to fix the problem in the data frame. 

Other casing functions are:

- `tolower()`: returns lower case of string
- `toupper()`: returns upper case of string
- `tools::toTitleCase()`: returns Title Case (capitalize first letter of string) 


```{r}
DAT %>%
  filter(., stringr::str_detect(tolower(Sex), "ma"))
```

For some, reading this code may be difficult. In order to understand the code, you need to read it inside out like slices of an onion. First understand the first function as the returned value is passed to the next function and so forth. 

For example, elements of the `Sex` vector are converted to lower case and returned using `tolower()`. We can demonstrate this using only the vector from the data frame using the `$` operator, `DAT$Sex`.

The initial vector:

```{r}
DAT$Sex
```

To lowercase:

```{r}
tolower(DAT$Sex)
```

Next, `stringr::str_detect()` will return a vector of `TRUE` or `FALSE` for all element positions of `DAT$Sex` for which the (now lowercase) string matches `"ma"`:

```{r}
stringr::str_detect(tolower(DAT$Sex), "ma")
```

Another approach would be to perform the steps in pieces by first mutating the data frame so that elements in the `Sex` vector are converted to lowercase and then pipe that mutated data from to `filter()`.  

Briefly, we will introduce `dplyr::mutate()` to accomplish this goal. `mutate()` is used to add, update, etc. variables in a data frame or tibble.

Mutate `Sex` using `mutate()`:

```{r}
DAT %>%
  mutate(., Sex = tolower(Sex))
```

Now mutate and pipe that mutated data frame using `%>%` (from **{margittr}**) or `|>` (`base R` version 4.1+) to `filter()`:

```{r}
DAT %>%
  mutate(., Sex = tolower(Sex)) %>%
  filter(., stringr::str_detect(Sex, "ma"))
```


Pairing this piping approach with `toTitleCase()` may be better as only the first letter will be capitalized and you are looking for "Ma".

```{r}
DAT %>%
  mutate(., Sex = tools::toTitleCase(Sex)) %>%
  filter(., stringr::str_detect(Sex, "Ma"))
```

But notice the `male` and `man` issue is still a problem. 

So what are the unique elements in `DAT$Sex`? Your friend here is `unique()`. And maybe you are too.

```{r}
unique(DAT$Sex)
```

You can hard code a fix using `%in%` and `case_when()`. `case_when()` is **{dplyr}**'s solution for multiple-case conditional.  

```{r}
DAT %>%
  mutate(., 
         Sex = tolower(Sex), # convert to lowercase first
         Sex = case_when(    # then recode cases when matched
           Sex %in% c("male", "man") ~ "Male",
           Sex %in% c("female", "woman") ~ "Female"
         )
)
```

For a more flexible fix, you can use `str_detect()`:

BUT beware that the order of operations matters with this approach. Because the string "female" contains characters "ma", you could accidentally recode all "female" cases to "male" if you perform the `case_when()` conversion on "male" first. 

```{r}
DAT %>%
  mutate(., 
         Sex = tolower(Sex),   # convert first
         Sex = case_when(      # then recode
           stringr::str_detect(Sex, "fe") ~ "Female",
           stringr::str_detect(Sex, "ma") ~ "Male",
         ))
```

Note that conditions in not declared in `case_when()` will be recoded as `NA`, which is what happens for `"neither"`. Make sure to include all ways you wish you recode cases.



# **Filtering Missing Data (`NAs`)**

`is.na()` will return a logical vector for which `TRUE` represents there are missing values.

Try on the entire data frame...

```{r}
is.na(DAT)
```

You can see that some columns contain cases/rows with `TRUE` indicating the cell contains `NA`.

The negation operator, `!`, will be used to illustrate some filtering approaches. Because `filter()` will filter out `FALSE` cases and retain `TRUE` ones, so you may sometimes need to negate a function so that you keep the rows you want to keep.  

- `na.omit()`: removes rows with NAs
- `filter(., is.na(column_name))`: keep rows with NA in specific variable
- `filter(., !is.na(column_name))`: remove rows with NA in specific variable
- `filter(., complete.cases(.))`: remove rows with NAs


## *Filter using `na.omit()`:*

```{r}
DAT %>%
  na.omit(.) #%>%     # omit any rows with NAs 
```


## *Filter using `is.na()` and `!is.na()`:*

```{r}
DAT %>%
  filter(., is.na(Sex))       # keep NAs by variable
```

But your goal may likely be to keep everything that is not `NA`:

```{r}
DAT %>%
  filter(., !is.na(Sex))      # remove NAs by variable
```

And filter step-by-step for each variable using `%>%` and separate function calls: 

```{r}
DAT %>%
  filter(., !is.na(Sex)) %>%      
  filter(., !is.na(Renting))
```

So why use separate lines of code if you can use `&` all in one line? One reason is that separate function calls written as separate lines of code make code inclusion/exclusion extremely easy.

Comment out what you don't want using `#`:

```{r}
DAT %>%
  #filter(., !is.na(Sex)) %>%      
  filter(., !is.na(Renting))
```


## *Filter using `complete.cases()`:*

The `complete.cases()` function returns a logical vector for which `TRUE` reflects the row has complete information and no missing cases. Using `complete.cases()` along with `filter()`, you would retain all rows `TRUE` rows.

```{r}
DAT %>%
  dplyr::filter(., complete.cases(.))
```


# **The Data Manipulation Workflow: Putting It All Together**

Of course, all of these functions can be paired with `select()`, `mutate()`, `filter()`, etc. Here is the data manipulation workflow. 

```
dataframe %>%
    select(., ...) %>%     # select variables of interest
    mutate(., ...) %>%     # then create new variables
    filter(., ...) %>%     # then filter by rows
    group_by(., ...) %>%   # then group for subsetting
    summarize(., ...)      # then summarize
```

